version: '3.7'
services:

  ####################################
  # Begin Fixtures
  ####################################
  neo4j:
    image: menome/thelink-neo4j-main${CONTAINER_LABEL_NEO4J}
    # build: fixtures/neo4j
    ports:
      - "7473:7473"   # web interface (SSL)
      - "7474:7474"   # web interface
      - "7687:7687"   # bolt
    environment:
      - NEO4J_apoc_export_file_enabled=yes
      - NEO4J_apoc_import_file_enabled=yes
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,algo.*
      - NEO4J_dbms_security_procedures_whitelist=apoc.*,algo.*  
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASS}
    volumes:
      - ${NEO4J_DATA_MOUNT}:/var/lib/neo4j/data # Data Mount
      - ${NEO4J_IMPORT_MOUNT}:/var/lib/neo4j/import

  minio:
    image: menome/minio${CONTAINER_LABEL_MINIO}
    # build: fixtures/minio
    ports:
      - "9000:9000" # web interface
    environment:
      - VIRTUAL_HOST=${MINIO_VIRTUAL_HOST}
      - LETSENCRYPT_HOST=${MINIO_VIRTUAL_HOST}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - RABBIT_HOST=rabbitmq:5672
    command: server /export
    restart: unless-stopped
    volumes:
      - ${MINIO_DATA_DIR}:/export
    links:
      - rabbitmq

  rabbitmq:
    image: rabbitmq${CONTAINER_LABEL_RABBIT}
    ports:
      - "15672:15672"   # web management interface
      - "5672:5672"     # amqp
    environment:
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
  ####################################
  # End Fixtures
  ####################################

  ####################################
  # Begin Bots
  ####################################

  # these builds are slow and painful

  librarian:
    image: menome/file-librarian${CONTAINER_LABEL_LIBRARIAN}
    environment:
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${LIBRARIAN_JWT_SECRET}
      - LIBRARIAN_USER=${LIBRARIAN_USERNAME}
      - LIBRARIAN_PASSWORD=${LIBRARIAN_PASSWORD}
    ports:
      - 3020:80
      - 3021:443
    links:
      - minio
    volumes: # These need not be mounted in the prod environment.
      - ${LIBRARIAN_CONFIG_HOST_DIR}:/srv/app/config # Config Mount
      - ${CERTS_MOUNT}:/srv/app/ssl
      # TODO: I think librarian needed certs directly. Mount them in?

  datarefinery:
    image: menome/datarefinery${CONTAINER_LABEL_REFINERY}
    links:
      - rabbitmq
    environment:
      - NODE_ENV=${NODE_ENV}
      - INFER_DATES=true
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASS=${NEO4J_PASS}
      - NEO4J_URL=${NEO4J_URL}
      - RABBIT_URL=${RABBIT_URL}

  csvHarvester:
    image: .
    links:
      -rabbitmq
      -librarian
    environment:
      - RABBIT_OUTGOING_URL=${RABBIT_URL}
      - LIBRARIAN_HOST=${LIBRARIAN_HOST}
      - LIBRARIAN_USERNAME=${LIBRARIAN_USERNAME}
      - LIBRARIAN_PASSWORD=${LIBRARIAN_PASSWORD}
      - LIBRARIAN_SECRET=${LIBRARIAN_JWT_SECRET}

  # filefrontier:
  #   image: menome/thefilefrontier${CONTAINER_LABEL_FILEFRONTIER}
  #   environment:
  #     - NODE_ENV=${NODE_ENV}
  #     - NEO4J_USER=${NEO4J_USER}
  #     - NEO4J_PASS=${NEO4J_PASS}
  #     - NEO4J_URL=${NEO4J_URL}
  #     - RABBIT_URL=${RABBIT_URL}
  #     - RABBIT_OUTGOING_URL=${RABBIT_URL}
  #     - LIBRARIAN_HOST=${LIBRARIAN_HOST}
  #     - LIBRARIAN_USERNAME=${LIBRARIAN_USERNAME}
  #     - LIBRARIAN_PASSWORD=${LIBRARIAN_PASSWORD}
  #     - LIBRARIAN_SECRET=${LIBRARIAN_JWT_SECRET}
  #     - MINIO_HOSTNAME=${MINIO_HOSTNAME}
  #     - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
  #     - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
  #   links:
  #     - rabbitmq
  #     - librarian
  #   volumes:
  #     - ./config/fpp-config.json:/srv/app/config/fpp-config.json:ro

  # fulltextbot:
  #   image: menome/fulltextbot${CONTAINER_LABEL_FULLTEXTBOT}
  #   links:
  #     - rabbitmq
  #     - librarian
  #   environment:
  #     - NODE_ENV=${NODE_ENV}
  #     - RABBIT_URL=${RABBIT_URL}
  #     - RABBIT_OUTGOING_URL=${RABBIT_URL}
  #     - RABBIT_PREFETCH=1
  #     - LIBRARIAN_HOST=${LIBRARIAN_HOST}
  #     - LIBRARIAN_USERNAME=${LIBRARIAN_USERNAME}
  #     - LIBRARIAN_PASSWORD=${LIBRARIAN_PASSWORD}
  #     - LIBRARIAN_SECRET=${LIBRARIAN_JWT_SECRET}
  #     - NEO4J_USER=${NEO4J_USER}
  #     - NEO4J_PASS=${NEO4J_PASS}
  #     - NEO4J_URL=${NEO4J_URL}
  #     - MINIO_HOSTNAME=${MINIO_HOSTNAME}
  #     - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
  #     - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
  #   volumes:
  #     - ./config/fpp-config.json:/srv/app/config/fpp-config.json:ro

  # # TODO: This does not work. It connects to RMQ and then just hangs until the connection drops.
  # # Something is probably locking our JS thread here.
  # thumbnailbot:
  #   image: menome/thumbnailbot${CONTAINER_LABEL_THUMBNAILBOT}
  #   links:
  #     - rabbitmq
  #     - librarian
  #     - minio
  #   environment:
  #     - NODE_ENV=${NODE_ENV}
  #     - MINIO_HOSTNAME=${MINIO_HOSTNAME}
  #     - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
  #     - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
  #     - RABBIT_URL=${RABBIT_URL}
  #     - RABBIT_OUTGOING_URL=${RABBIT_URL}
  #     - LIBRARIAN_HOST=${LIBRARIAN_HOST}
  #     - LIBRARIAN_USERNAME=${LIBRARIAN_USERNAME}
  #     - LIBRARIAN_PASSWORD=${LIBRARIAN_PASSWORD}
  #     - LIBRARIAN_SECRET=${LIBRARIAN_JWT_SECRET}
  #     - NEO4J_USER=${NEO4J_USER}
  #     - NEO4J_PASS=${NEO4J_PASS}
  #     - NEO4J_URL=${NEO4J_URL}
  #     - RABBIT_PREFETCH=1
  #   volumes:
  #     - ./config/fpp-config.json:/srv/app/config/fpp-config.json:ro

  # topicmodelbot:
  #   image: menome/topicmodelbot${CONTAINER_LABEL_TOPICMODELBOT}
  #   links:
  #     - rabbitmq
  #     - librarian
  #     - minio
  #   environment:
  #     - NODE_ENV=${NODE_ENV}
  #     - MINIO_HOSTNAME=${MINIO_HOSTNAME}
  #     - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
  #     - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
  #     - RABBIT_URL=${RABBIT_URL}
  #     - RABBIT_OUTGOING_URL=${RABBIT_URL}
  #     - LIBRARIAN_HOST=${LIBRARIAN_HOST}
  #     - LIBRARIAN_USERNAME=${LIBRARIAN_USERNAME}
  #     - LIBRARIAN_PASSWORD=${LIBRARIAN_PASSWORD}
  #     - LIBRARIAN_SECRET=${LIBRARIAN_JWT_SECRET}
  #     - NEO4J_USER=${NEO4J_USER}
  #     - NEO4J_PASS=${NEO4J_PASS}
  #     - NEO4J_URL=${NEO4J_URL}
  #     - RABBIT_PREFETCH=1
  #   volumes:
  #     - ./config/fpp-config.json:/srv/app/config/fpp-config.json:ro

  # ocrbot:
  #   image: menome/ocrbot${CONTAINER_LABEL_OCRBOT}
  #   links:
  #     - rabbitmq
  #     - librarian
  #     - minio
  #   environment:
  #     - NODE_ENV=${NODE_ENV}
  #     - RABBIT_URL=${RABBIT_URL}
  #     - RABBIT_OUTGOING_URL=${RABBIT_URL}
  #     - LIBRARIAN_HOST=${LIBRARIAN_HOST}
  #     - LIBRARIAN_USERNAME=${LIBRARIAN_USERNAME}
  #     - LIBRARIAN_PASSWORD=${LIBRARIAN_PASSWORD}
  #     - LIBRARIAN_SECRET=${LIBRARIAN_JWT_SECRET}
  #     - NEO4J_USER=${NEO4J_USER}
  #     - NEO4J_PASS=${NEO4J_PASS}
  #     - NEO4J_URL=${NEO4J_URL}
  #     - RABBIT_PREFETCH=1
  #   volumes:
  #     - ./config/fpp-config.json:/srv/app/config/fpp-config.json:ro

  # # This never really functioned. It's too much of a hackjob to feel good about including here.
  # # tablebot:
  # #   image: menome/tablebot${CONTAINER_LABEL_TABLEBOT}
  # #   links:
  # #     - rabbitmq
  # #     - librarian
  # #     - minio
  # #   environment:
  # #     - NODE_ENV=${NODE_ENV}
  # #     - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
  # #     - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
  # #     - RABBIT_URL=${RABBIT_URL}
  # #     - RABBIT_OUTGOING_URL=${RABBIT_URL}
  # #     - LIBRARIAN_HOST=${LIBRARIAN_HOST}
  # #     - LIBRARIAN_USERNAME=${LIBRARIAN_USERNAME}
  # #     - LIBRARIAN_PASSWORD=${LIBRARIAN_PASSWORD}
  # #     - LIBRARIAN_SECRET=${LIBRARIAN_JWT_SECRET}
  # #     - NEO4J_USER=${NEO4J_USER}
  # #     - NEO4J_PASS=${NEO4J_PASS}
  # #     - NEO4J_URL=${NEO4J_URL}
  # #     - RABBIT_PREFETCH=1

  # ####################################
  # # End Bots
  # ####################################

  # ####################################
  # # Begin Customer Facing
  # ####################################

  # web:
  #   image: menome/thelink-react${CONTAINER_LABEL_THELINKWEB}
  #   environment:
  #     - THELINK_API=${API_PUBLIC_URL}
  #     - VIRTUAL_HOST=${WEB_VIRTUAL_HOST}
  #     - THELINK_FILESTORE_URL=https://${MINIO_VIRTUAL_HOST}
  #     - NODE_ENV=${NODE_ENV}
  #     - LETSENCRYPT_HOST=${WEB_VIRTUAL_HOST}
  #     - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
  #     - GOOGLE_MAP_API_KEY=${GOOGLE_MAP_API_KEY}
  #   ports:
  #     - 3050:80

  # api:
  #   image: menome/thelink-api${CONTAINER_LABEL_THELINKAPI}
  #   links:
  #     - neo4j
  #   ports:
  #     - "3051:80"
  #   environment:
  #     - NODE_ENV=${NODE_ENV}
  #     - THELINK_WEB=${WEB_PUBLIC_URL}
  #     - VIRTUAL_HOST=${API_VIRTUAL_HOST}
  #     - LETSENCRYPT_HOST=${API_VIRTUAL_HOST}
  #     - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
  #   volumes:
  #     - ${THELINKAPI_CONFIG_HOST_DIR}:/srv/theLink/config
  #     - ${THELINKAPI_LOGS_HOST_DIR}:/srv/theLink/logs

  # controllerbot:
  #   image: menome/controllerbot${CONTAINER_LABEL_CONTROLLERBOT}
  #   ports:
  #     - 3080:80
  #   links:
  #     - datarefinery
  #     - librarian
  #     - thumbnailbot
  #     - topicmodelbot
  #     - fulltextbot
  #     - filefrontier
  #   environment:
  #     - NODE_ENV=${NODE_ENV}
  #     - VIRTUAL_HOST=${CONTROLLERBOT_VIRTUAL_HOST}
  #     - LETSENCRYPT_HOST=${CONTROLLERBOT_VIRTUAL_HOST}
  #     - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
  #     - CONTROLLER_PASSWORD=${CONTROLLERBOT_PASSWORD}
  #   volumes:
  #     - ${CONTROLLERBOT_CONFIG_HOST_DIR}:/srv/app/config

  # Proxy / Letsencrypt containers.
  # Used only for production.
  # TODO: Unsure if volumes will work okay here. The letsencrypt examples all use `volumes_from`

  # nginx-proxy:
  #   image: jwilder/nginx-proxy
  #   container_name: nginx-proxy
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - /var/run/docker.sock:/tmp/docker.sock:ro
  #     - /usr/share/nginx/html
  #     - /etc/nginx/vhost.d
  #     - ${CERTS_MOUNT}:/etc/nginx/certs
  #     - ./config/nginx-proxy/client_max_body_size.conf:/etc/nginx/conf.d/client_max_body_size.conf:ro # Fix uploading size restriction complaints.
  #   labels:
  #     - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy
  #   logging:
  #     driver: none
  #   environment:
  #     - HTTPS_METHOD=noredirect
  # letsencrypt-nginx-proxy-companion:
  #   image: jrcs/letsencrypt-nginx-proxy-companion
  #   logging:
  #     driver: none
  #   volumes:
  #     - /usr/share/nginx/html
  #     - /etc/nginx/vhost.d
  #     - ${CERTS_MOUNT}:/etc/nginx/certs
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"

  ####################################
  # End Customer Facing
  ####################################
# For Prod use only.
#volumes:
  #controllerbot_persist:
# certs_volume: